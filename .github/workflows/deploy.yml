name: Deploy TvojeHnizdo static to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Upload static site to VPS (/tmp/th_github)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: "/tmp/th_github"
          overwrite: true

      - name: Remote deploy to /var/www/tvojehnizdo.com/html
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || '22' }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -euo pipefail
            DOMAIN="tvojehnizdo.com"
            WEBROOT="/var/www/${DOMAIN}/html"
            SITECONF="/etc/nginx/sites-available/${DOMAIN}"
            apt-get update -y >/dev/null 2>&1 || true
            apt-get install -y rsync jq >/dev/null 2>&1 || true

            mkdir -p "${WEBROOT}.new"
            rsync -a --delete /tmp/th_github/ "${WEBROOT}.new"/
            if [ -d "$WEBROOT" ]; then mv "$WEBROOT" "/var/www/${DOMAIN}/html.bak_$(date +%Y%m%d%H%M%S)"; fi
            mv "${WEBROOT}.new" "$WEBROOT"
            chown -R www-data:www-data "/var/www/${DOMAIN}"

            cat > "$SITECONF" <<'NGINX'
            server {
                listen 80; listen [::]:80;
                server_name tvojehnizdo.com www.tvojehnizdo.com;
                include /etc/nginx/snippets/th-security.conf;
                location /.well-known/acme-challenge/ { root /var/www/tvojehnizdo.com/html; }
                return 301 https://$host$request_uri;
            }
            server {
                listen 443 ssl http2; listen [::]:443 ssl http2;
                server_name tvojehnizdo.com www.tvojehnizdo.com;
                ssl_certificate     /etc/letsencrypt/live/tvojehnizdo.com/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/tvojehnizdo.com/privkey.pem;
                ssl_trusted_certificate /etc/letsencrypt/live/tvojehnizdo.com/chain.pem;
                include /etc/nginx/snippets/th-security.conf;
                add_header X-Content-Type-Options nosniff;
                add_header X-Frame-Options SAMEORIGIN;
                add_header Referrer-Policy strict-origin-when-cross-origin;
                location = /status { default_type text/plain; return 200 "OK\n"; }
                location ^~ /control/ { default_type application/json; root /var/www/tvojehnizdo.com/html; autoindex off; }
                root /var/www/tvojehnizdo.com/html;
                index index.html;
                location / { try_files $uri $uri/ /index.html; }
            }
            NGINX
            nginx -t && systemctl reload nginx

            # Purge Cloudflare cache (pokud mÃ¡me secrets)
            if [ -n "${{ secrets.CF_ZONE }}" ] && [ -n "${{ secrets.CF_TOKEN }}" ]; then
              curl -fsS -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE }}/purge_cache" \
                -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" -H "Content-Type: application/json" \
                --data '{"purge_everything":true}' >/dev/null || true
            fi

            # Go-Live log
            CTRL="$WEBROOT/control"; mkdir -p "$CTRL"
            TS="$(date -Is)"; IP="$(hostname -I 2>/dev/null | awk '{print $1}')"
            if command -v jq >/dev/null 2>&1; then
              find "$WEBROOT" -maxdepth 2 -type f | head -n 80 | sed "s|$WEBROOT/||g" | jq -R . | jq -s --arg ts "$TS" --arg ip "$IP" \
                '{timestamp:$ts, vps_ip:$ip, files:.}' > "$CTRL/deploy.json"
            else
              echo "{\"timestamp\":\"$TS\",\"vps_ip\":\"$IP\"}" > "$CTRL/deploy.json"
            fi
